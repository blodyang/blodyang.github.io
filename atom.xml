<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-21T02:40:49.958Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>promise</title>
    <link href="http://yoursite.com/wiki/promise/"/>
    <id>http://yoursite.com/wiki/promise/</id>
    <published>2020-08-21T02:08:35.000Z</published>
    <updated>2020-08-21T02:40:49.958Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本介绍-异步promise"><a href="#基本介绍-异步promise" class="headerlink" title="基本介绍 异步promise"></a>基本介绍 异步promise</h4><p>Promise是ES6中新增的构造器。它主要用来优化实现异步操作的另一种方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nodjs文件读写</span></span><br><span class="line">fs.readFile(路径，utf8,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="promise构造器"><a href="#promise构造器" class="headerlink" title="promise构造器"></a>promise构造器</h4><p>Promise是一个构造器，用来创建Promise类型的对象 。就好像Array是一个构造器，用来创建数组</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p> <img src="/wiki/promise/1.png" alt="1.png"><br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">ok,err</span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="comment">//某个条件下，执行ok()</span></span><br><span class="line"><span class="comment">// 某个条件下，执行err</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href></a></li><li><a href></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;基本介绍-异步promise&quot;&gt;&lt;a href=&quot;#基本介绍-异步promise&quot; class=&quot;headerlink&quot; title=&quot;基本介绍 异步promise&quot;&gt;&lt;/a&gt;基本介绍 异步promise&lt;/h4&gt;&lt;p&gt;Promise是ES6中新增的构造器。它主要
      
    
    </summary>
    
    
      <category term="promise" scheme="http://yoursite.com/categories/promise/"/>
    
    
      <category term="promise" scheme="http://yoursite.com/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>跨域</title>
    <link href="http://yoursite.com/wiki/%E8%B7%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/wiki/%E8%B7%A8%E5%9F%9F/</id>
    <published>2020-08-20T08:47:29.000Z</published>
    <updated>2020-08-20T08:48:01.118Z</updated>
    
    <content type="html"><![CDATA[<h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><ol><li>不同域名 不同端口 不同协议  不同域名</li><li>proxy 代理  jsonp  后端配置(常用)</li></ol><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1、加载优化  </span><br><span class="line"> 静态资源加载优化，cdn or oss</span><br><span class="line"> 尽可能少的加载外联css、js代码，html头部，增加dsn-preftch，减少dns解析时间</span><br><span class="line"> 压缩css js pic，减小体积，服务端开启gzip压缩</span><br><span class="line"> 控制http请求</span><br><span class="line"> js加载脚本阻塞浏览器主线程，考虑异步， 如 async</span><br><span class="line"> 利用好缓存，利用好http响应头缓存字段，开启静态资源缓存</span><br><span class="line">2、浏览器渲染</span><br><span class="line"> css层不要太深，避免最内层使用统配选择器</span><br><span class="line"> js脚本不要太复杂，减少js解析时间，少引用复杂的第三方脚本</span><br><span class="line"> 模块按需加载，按需打包，首页仅仅加载和执行和首屏相关的脚本，其他脚本延迟加载</span><br><span class="line"> 第三方包需不需 要精简</span><br><span class="line"> 打包优化，code split webpack</span><br><span class="line"></span><br><span class="line">3，缓存</span><br><span class="line"> 内存  响应资源放入内存，直接读取，无需线程转换， 消耗资源</span><br><span class="line"> 客户端缓存</span><br><span class="line"> HTTp缓存   catche-control与服务器进行数据协商，根据标准缓存活着更新资源</span><br><span class="line"> 网络相关的缓存  一般指dns解析结果的缓存或者预连接缓存，创建一个https成本很大</span><br><span class="line"> cdn  根据用户ip地址及请求的url选择一台距离用户比较近的资源缩短路径，提升性能  </span><br><span class="line"> localstorage缓存html文档首次访问页面时，js执行完后会生成完整的html文档，缓存到localstorage里面  </span><br><span class="line"></span><br><span class="line">浏览器js占用大量时间</span><br><span class="line"></span><br><span class="line">LINUX命令将一个文件夹里面的所有文件复制到指定文件里     cp -r &#x2F;root&#x2F;XXX&#x2F;Account&#x2F;. &#x2F;ftp&#x2F;ZJNX</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href></a></li><li><a href></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;跨域&quot;&gt;&lt;a href=&quot;#跨域&quot; class=&quot;headerlink&quot; title=&quot;跨域&quot;&gt;&lt;/a&gt;跨域&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;不同域名 不同端口 不同协议  不同域名&lt;/li&gt;
&lt;li&gt;proxy 代理  jsonp  后端配置(常用)&lt;/li&gt;
&lt;/o
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="跨域" scheme="http://yoursite.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>闭包</title>
    <link href="http://yoursite.com/wiki/%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/wiki/%E9%97%AD%E5%8C%85/</id>
    <published>2020-08-20T08:45:50.000Z</published>
    <updated>2020-08-20T08:46:43.388Z</updated>
    
    <content type="html"><![CDATA[<h3 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h3><h6 id="一个函数可以访问外部函数的内部变量，构成一个闭包环境-函数嵌套-引用外部函数变量，-内部函数有一个对象，存储外部被引用的变量"><a href="#一个函数可以访问外部函数的内部变量，构成一个闭包环境-函数嵌套-引用外部函数变量，-内部函数有一个对象，存储外部被引用的变量" class="headerlink" title="一个函数可以访问外部函数的内部变量，构成一个闭包环境(函数嵌套  引用外部函数变量，  内部函数有一个对象，存储外部被引用的变量)"></a>一个函数可以访问外部函数的内部变量，构成一个闭包环境(函数嵌套  引用外部函数变量，  内部函数有一个对象，存储外部被引用的变量)</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">闭包的生命周期：在嵌套的内部函数成为垃圾对象时</span><br><span class="line">也就是不再被引用</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">闭包作用</span><br><span class="line"></span><br><span class="line">1. 变量维持的内存中</span><br><span class="line">2. 保护内部变量，以防造成污染</span><br><span class="line">   - 但是会造成内存泄露</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用场景---自定义js模块  </span><br><span class="line"></span><br><span class="line">开发中经常用到的函数，格式化时间日期的，判断是否是数字的等等，封装到一个模块里面，  </span><br><span class="line">在需要使用的地方引入。不能直接访问内部的东西，但是可以通过暴露接口给外部，操作内部的数据</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">n, o</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(o);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">          fun:<span class="function"><span class="keyword">function</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> fun(m, n);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; </span><br><span class="line">   </span><br><span class="line">   <span class="comment">//   var b = fun(0).fun(1).fun(2).fun(3);  //0 1 2    </span></span><br><span class="line"> <span class="comment">// m1no n 1 o 0    m 2 n 1  n 2 o 1    m 3 n 2  n 3 o 2</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  var a = fun(0);</span></span><br><span class="line">  <span class="comment">//  a.fun(1);//m 1 n 0</span></span><br><span class="line">  <span class="comment">//  a.fun(2); // m2 n 0</span></span><br><span class="line">  <span class="comment">//  a.fun(3); //m 3 n 0</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> c = fun(<span class="number">0</span>).fun(<span class="number">1</span>); <span class="comment">// m 1 n 0 n 1 o 0   </span></span><br><span class="line">    c.fun(<span class="number">2</span>); <span class="comment">// m 2 n 1 n 2 o 1 </span></span><br><span class="line">    c.fun(<span class="number">3</span>); <span class="comment">//  m 3 n 1  n 3 o 1</span></span><br></pre></td></tr></table></figure><h6 id="闭包的缺点"><a href="#闭包的缺点" class="headerlink" title="闭包的缺点"></a>闭包的缺点</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">函数执行完后，函数内部局部变量没有释放，占用内存时间会边长容易造成内存泄露</span><br><span class="line">***解决---及时释放内存</span><br><span class="line">结束生命&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  f&#x3D;null</span><br></pre></td></tr></table></figure><h6 id="闭包的暴力理解"><a href="#闭包的暴力理解" class="headerlink" title="闭包的暴力理解"></a>闭包的暴力理解</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">在使用闭包时候，当函数执行完，用一个新的引入变量，去接受内部函数返回的函数对象，闭包就在函数对象里面形成了，  </span><br><span class="line">作用就是 延长了外部函数变量的生命周期，以及内部函数对象的生命周期。</span><br><span class="line"></span><br><span class="line">如果没有引入变量是不会占用内存的，产生了  又放走了。</span><br><span class="line"></span><br><span class="line">结合截屏 看。。。对象的引用+垃圾回收机制</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">函数在 那个对象里面调用，this就指向那个对象。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href></a></li><li><a href></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;闭包的作用&quot;&gt;&lt;a href=&quot;#闭包的作用&quot; class=&quot;headerlink&quot; title=&quot;闭包的作用&quot;&gt;&lt;/a&gt;闭包的作用&lt;/h3&gt;&lt;h6 id=&quot;一个函数可以访问外部函数的内部变量，构成一个闭包环境-函数嵌套-引用外部函数变量，-内部函数有一个对象，存
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="闭包" scheme="http://yoursite.com/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>js的数据类型</title>
    <link href="http://yoursite.com/wiki/js%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/wiki/js%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-08-20T06:02:09.000Z</published>
    <updated>2020-08-20T06:03:26.270Z</updated>
    
    <content type="html"><![CDATA[<p>### ES 6为止,7种类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数值（number）：整数和小数（比如<span class="number">1</span>和<span class="number">2.2</span>）</span><br><span class="line">字符串（string）：文本（比如Everybody Loves Eileen）。</span><br><span class="line">布尔值（boolean）：表示真伪的两个特殊值，即<span class="literal">true</span>（真）和<span class="literal">false</span>（假）</span><br><span class="line"><span class="literal">undefined</span>：表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值</span><br><span class="line"><span class="literal">null</span>：表示空值，即此处的值为空</span><br><span class="line">对象（object）：各种值组成的集合</span><br><span class="line"><span class="built_in">Symbol</span>：独一无二的值，可以保证不会与其他属性名产生冲突</span><br></pre></td></tr></table></figure><p>### 内置的类型识别方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> 运算符</span><br><span class="line"><span class="keyword">instanceof</span> 运算符</span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call() </span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href></a></li><li><a href></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;### ES 6为止,7种类型&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>js基础</title>
    <link href="http://yoursite.com/wiki/js/"/>
    <id>http://yoursite.com/wiki/js/</id>
    <published>2020-08-03T10:28:22.000Z</published>
    <updated>2020-08-20T06:06:33.863Z</updated>
    
    <content type="html"><![CDATA[<h3 id="js创建对象的方式"><a href="#js创建对象的方式" class="headerlink" title="js创建对象的方式"></a>js创建对象的方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 通过构造函数obj来创建</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> object();</span><br><span class="line"></span><br><span class="line">obj.name = <span class="string">&quot;xm&quot;</span>;</span><br><span class="line"></span><br><span class="line">obj.age = <span class="number">19</span>;</span><br><span class="line"></span><br><span class="line">obj.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 字面量创建</span><br><span class="line"><span class="keyword">var</span> obj =&#123;</span><br><span class="line"></span><br><span class="line">　　name: <span class="string">&quot; xm&quot;</span>,</span><br><span class="line"></span><br><span class="line">　　age: <span class="number">19</span>,</span><br><span class="line"></span><br><span class="line">　　eat: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3.</span>工厂函数</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">students</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> obj =&#123;　　　　</span><br><span class="line"></span><br><span class="line">　　name: <span class="string">&quot; xm&quot;</span>,</span><br><span class="line"></span><br><span class="line">　　age: <span class="number">19</span>,</span><br><span class="line"></span><br><span class="line">　　eat: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>  obj;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> xm =  student(<span class="string">&quot;xm&quot;</span>,<span class="number">19</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xh =  student(<span class="string">&quot;xh&quot;</span>,<span class="number">19</span>);</span><br><span class="line"><span class="number">4.</span> 自定义构造函数创建</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">students</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　<span class="built_in">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">　　<span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xm = <span class="keyword">new</span>  student(<span class="string">&quot;xm&quot;</span>,<span class="number">19</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote><ul><li><a href="https://zhuanlan.zhihu.com/p/75467441">阅读更多</a></li><li><a href="https://www.cnblogs.com/ganmy/p/11401140.html">more</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;js创建对象的方式&quot;&gt;&lt;a href=&quot;#js创建对象的方式&quot; class=&quot;headerlink&quot; title=&quot;js创建对象的方式&quot;&gt;&lt;/a&gt;js创建对象的方式&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue</title>
    <link href="http://yoursite.com/wiki/vue/"/>
    <id>http://yoursite.com/wiki/vue/</id>
    <published>2020-08-02T08:58:18.670Z</published>
    <updated>2020-08-20T06:05:49.653Z</updated>
    
    <content type="html"><![CDATA[<h3 id="v-if-v-show区别"><a href="#v-if-v-show区别" class="headerlink" title="v-if  v-show区别"></a>v-if  v-show区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v-if更高的切换开销，v-show更高的渲染开销，</span><br><span class="line">频繁切换 v-show比较好，运行时条件不太可能改变 v-if比较好</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v-if监听组件的销毁与创建    v-if惰性，初始条件为假，什么也不做，只到条件第一次为真时候，才会开始条件渲染</span><br><span class="line">v-show 不管初始条件是什么，元素总是被渲染，并且只是简单的</span><br><span class="line">基于css进行切换</span><br></pre></td></tr></table></figure><h3 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">（2+） beforeCreate created beforeMount mounted beforeUpdate updated beforeDestroy destroyed </span><br><span class="line">-----使用了 keep-alive 就会多2个生命周期： activated deactivated </span><br><span class="line"></span><br><span class="line">二、生命周期的理解 总共分为：8个阶段 创建前&#x2F;后： </span><br><span class="line"></span><br><span class="line">beforeCreate ：vue实例的挂载元素$el和数据对象data都为undefined，还未初始化。 </span><br><span class="line">created ： vue实例的数据对象data有了，但是$el还是没有 </span><br><span class="line">载入前&#x2F;后 beforeMount : vue实例的$el和data都初始化了,但还是挂载之前为虚拟dom节点，data.msg还未替换。 </span><br><span class="line">mounted : vue实例挂载完成,data.msg成功渲染的 </span><br><span class="line">更新前&#x2F;后 当data变化时，会触发：beforeUpdate、updated </span><br><span class="line">销毁前&#x2F;后 当销毁的时候，会触发： beforeDestroy、destroyed </span><br><span class="line"></span><br><span class="line">三、DOM 渲染在哪个周期中就已经完成 ： mounted</span><br></pre></td></tr></table></figure><h3 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">父传子 props</span><br><span class="line">字传父  $emit传递一个事件，父组件监听事件</span><br><span class="line">兄弟传值  bus传值  $emit触发  $on监听</span><br></pre></td></tr></table></figure><h3 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">是什么？ </span><br><span class="line"></span><br><span class="line">内置组件，能在组件切换过程中将状态保存在内存中，防止重复渲染dom</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">keep-alive不会再dom树中渲染</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Vue-中的data为什么必须是一个函数"><a href="#Vue-中的data为什么必须是一个函数" class="headerlink" title="Vue 中的data为什么必须是一个函数"></a>Vue 中的data为什么必须是一个函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue 组件 data 为什么必须是函数    </span><br><span class="line">不用脚手架 vue.js new Vue(&#123; el:&quot;#app&quot;, template:xxx data: &#123; &#125; &#125;)   </span><br><span class="line">脚手架 组件 data 为什么必须是函数? 因为 JS 本身的特性带来的，   </span><br><span class="line">如果 data 是一个对象，那么由于对象本身属于引用类型，   </span><br><span class="line">当我们修改其中的一个属性时，   </span><br><span class="line">会影响到所有 Vue 实例的数据。如果将 data 作为一个函数返回一个对象，   </span><br><span class="line">那么每一个实例的 data 属性都是独立的，不会相互影响了。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="vue-cli项目中src目录每个文件夹和文件的用法？"><a href="#vue-cli项目中src目录每个文件夹和文件的用法？" class="headerlink" title="vue-cli项目中src目录每个文件夹和文件的用法？"></a>vue-cli项目中src目录每个文件夹和文件的用法？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">src assets           |     静态资源 （图片、js、css）</span><br><span class="line">components           |     非路由组件</span><br><span class="line">views                |      路由组件</span><br><span class="line">router               |      路由配置</span><br><span class="line">store                |      vuex（仓库）</span><br><span class="line">App.vue              |      挂载的第一个组件</span><br><span class="line">main.js              |      全局的文件</span><br><span class="line"></span><br><span class="line">index.html &#x3D;&gt; main.js  &#x3D;&gt; App.vue</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="你们vue项目是打包了一个js文件，一个css文件，还是有多个文件？"><a href="#你们vue项目是打包了一个js文件，一个css文件，还是有多个文件？" class="headerlink" title="你们vue项目是打包了一个js文件，一个css文件，还是有多个文件？"></a>你们vue项目是打包了一个js文件，一个css文件，还是有多个文件？</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 根据vue-cli脚手架规范，一个js文件，一个CSS文件。 </span><br><span class="line">在打包之前</span><br><span class="line"> 1.代理的url </span><br><span class="line">2.build assetsPublicPath: &#39;.&#x2F;&#39;</span><br></pre></td></tr></table></figure><h3 id="watch和computed差异"><a href="#watch和computed差异" class="headerlink" title="watch和computed差异"></a>watch和computed差异</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">computed ： 计算属性 1. 计算属性是由data中的已知值，得到一个新的值    </span><br><span class="line">2. 性能不好   </span><br><span class="line">3. 别人变化影响我自己   </span><br><span class="line"></span><br><span class="line"> watch : 监听数据的变化   </span><br><span class="line"> 1. 监听data中的数据   </span><br><span class="line"> 2. 我的变化影响别人</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="Vue-中-插件使用"><a href="#Vue-中-插件使用" class="headerlink" title="Vue 中 插件使用"></a>Vue 中 插件使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 下载 npm install xxx</span><br><span class="line">2. 引入 import xx from &#39;xxxx&#39; Vue.use(xxx)</span><br><span class="line">3. 配置 &lt;xx v-model&#x3D;&#39;xx&#39; select&#x3D;&#39;xx&#39;&gt;&lt;&#x2F;xx&gt;</span><br></pre></td></tr></table></figure><h3 id="vue-中-key-的作用-总结："><a href="#vue-中-key-的作用-总结：" class="headerlink" title="vue 中 key 的作用 总结："></a>vue 中 key 的作用 总结：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">key的作用主要是为了高效的更新虚拟dom 没有加key，diff默认算法的问题（虚拟dom） </span><br><span class="line"></span><br><span class="line">1. 如果节点类型不同，直接干掉前面所有的节点，再创建</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.Hash:      使用URL的hash值来作为路由。支持所有浏览器。</span><br><span class="line">2.History:   以来HTML5 History API 和服务器配置</span><br><span class="line">3.　Abstract： 支持所有javascript运行模式。如果发现没有浏览器的API，路由会自动强制进入这个模式。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;v-if-v-show区别&quot;&gt;&lt;a href=&quot;#v-if-v-show区别&quot; class=&quot;headerlink&quot; title=&quot;v-if  v-show区别&quot;&gt;&lt;/a&gt;v-if  v-show区别&lt;/h3&gt;&lt;figure class=&quot;highlight pl
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>css</title>
    <link href="http://yoursite.com/wiki/css/"/>
    <id>http://yoursite.com/wiki/css/</id>
    <published>2017-08-06T16:00:00.000Z</published>
    <updated>2020-08-09T02:46:02.423Z</updated>
    
    <content type="html"><![CDATA[<h3 id="让一个DIV垂直水平局中"><a href="#让一个DIV垂直水平局中" class="headerlink" title="让一个DIV垂直水平局中"></a>让一个DIV垂直水平局中</h3><ul><li>使用css方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;父盒子设置：</span><br><span class="line">display: table-cell;</span><br><span class="line">text-all: center;</span><br><span class="line">vertical-align: middle;</span><br><span class="line"></span><br><span class="line">div设置：</span><br><span class="line">display: inline-block;</span><br><span class="line">vertical-align: middle;</span><br></pre></td></tr></table></figure><ul><li>使用css3 transform</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">父盒子设置：</span><br><span class="line">display: relative</span><br><span class="line"></span><br><span class="line">div设置：</span><br><span class="line">transform: translater(-50%,-50%);</span><br><span class="line">position: absolute;</span><br><span class="line">top: 50%;</span><br><span class="line">left: 50%;</span><br></pre></td></tr></table></figure><h3 id="css引入方式"><a href="#css引入方式" class="headerlink" title="css引入方式"></a>css引入方式</h3><ul><li>行内式</li><li>内联式</li><li>外链式</li><li>导入式</li></ul><h3 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h3><ul><li>标签选择器<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">   <span class="attribute">color</span>: red;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li>属性选择器<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 把包含标题（title）的所有元素变为红色，可以写作： */</span></span><br><span class="line">*<span class="selector-attr">[title]</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 只对有 href 属性的锚（a 元素）应用样式 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href]</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将同时有 href 和 title 属性的 HTML 超链接的文本设置为红色 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href]</span><span class="selector-attr">[title]</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br></pre></td></tr></table></figure></li><li>id选择器<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#two</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>类选择器<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>并集选择器<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-tag">li</span>,<span class="selector-class">.ji</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>交集选择器<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-class">.ji</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li>后代选择器<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-class">.ji</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>子代选择器<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">ul</span>&gt;<span class="selector-class">.ji</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>: red;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote><ul><li><a href="https://www.html.cn/qa/css3/13065.html">html中文网</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;让一个DIV垂直水平局中&quot;&gt;&lt;a href=&quot;#让一个DIV垂直水平局中&quot; class=&quot;headerlink&quot; title=&quot;让一个DIV垂直水平局中&quot;&gt;&lt;/a&gt;让一个DIV垂直水平局中&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用css方法&lt;/li&gt;
&lt;/ul&gt;
&lt;figu
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
      <category term="css基础知识" scheme="http://yoursite.com/categories/css/css%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
  </entry>
  
</feed>
